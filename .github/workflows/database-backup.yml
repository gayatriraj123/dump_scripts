name: Database Backup Scheduler

on:
  schedule:
    - cron: '30 20 * * *'  # 2:00 AM UTC daily
  workflow_dispatch:

jobs:
  database-backup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mysql-client openssh-client git

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create SSH keys and environment
      run: |
        # Create .env file from secrets
        echo "EXT_SSH_KEY_PATH=EXG_Linux_key_pair.pem" >> .env
        echo "EXT_SSH_USER=${{ secrets.EXT_SSH_USER }}" >> .env
        echo "EXT_SSH_HOST=${{ secrets.EXT_SSH_HOST }}" >> .env
        echo "EXT_DB_NAME=${{ secrets.EXT_DB_NAME }}" >> .env
        echo "EXT_DB_USER=${{ secrets.EXT_DB_USER }}" >> .env
        echo "EXT_DB_PASSWORD=${{ secrets.EXT_DB_PASSWORD }}" >> .env
        echo "EXT_DB_HOST=${{ secrets.EXT_DB_HOST }}" >> .env
        echo "EXT_DB_PORT=${{ secrets.EXT_DB_PORT }}" >> .env
        
        echo "EXT_PRO_SSH_KEY_PATH=EXG_Linux_key_pair.pem" >> .env
        echo "EXT_PRO_SSH_USER=${{ secrets.EXT_PRO_SSH_USER }}" >> .env
        echo "EXT_PRO_SSH_HOST=${{ secrets.EXT_PRO_SSH_HOST }}" >> .env
        echo "EXT_PRO_DB_NAME=${{ secrets.EXT_PRO_DB_NAME }}" >> .env
        echo "EXT_PRO_DB_USER=${{ secrets.EXT_PRO_DB_USER }}" >> .env
        echo "EXT_PRO_DB_PASSWORD=${{ secrets.EXT_PRO_DB_PASSWORD }}" >> .env
        echo "EXT_PRO_DB_HOST=${{ secrets.EXT_PRO_DB_HOST }}" >> .env
        echo "EXT_PRO_DB_PORT=${{ secrets.EXT_PRO_DB_PORT }}" >> .env
        
        echo "BOPO_SSH_HOST=${{ secrets.BOPO_SSH_HOST }}" >> .env
        echo "BOPO_SSH_PORT=${{ secrets.BOPO_SSH_PORT }}" >> .env
        echo "BOPO_SSH_USER=${{ secrets.BOPO_SSH_USER }}" >> .env
        echo "BOPO_SSH_PASSWORD=${{ secrets.BOPO_SSH_PASSWORD }}" >> .env
        echo "BOPO_DB_NAME=${{ secrets.BOPO_DB_NAME }}" >> .env
        echo "BOPO_DB_USER=${{ secrets.BOPO_DB_USER }}" >> .env
        echo "BOPO_DB_PASSWORD=${{ secrets.BOPO_DB_PASSWORD }}" >> .env
        echo "BOPO_DB_HOST=${{ secrets.BOPO_DB_HOST }}" >> .env
        echo "BOPO_DB_PORT=${{ secrets.BOPO_DB_PORT }}" >> .env
        
        echo "KAVYA_SSH_KEY_PATH=Kavya_django_key.pem" >> .env
        echo "KAVYA_SSH_USER=${{ secrets.KAVYA_SSH_USER }}" >> .env
        echo "KAVYA_SSH_HOST=${{ secrets.KAVYA_SSH_HOST }}" >> .env
        echo "KAVYA_DB_NAME=${{ secrets.KAVYA_DB_NAME }}" >> .env
        echo "KAVYA_DB_USER=${{ secrets.KAVYA_DB_USER }}" >> .env
        echo "KAVYA_DB_PASSWORD=${{ secrets.KAVYA_DB_PASSWORD }}" >> .env
        echo "KAVYA_DB_HOST=${{ secrets.KAVYA_DB_HOST }}" >> .env
        echo "KAVYA_DB_PORT=${{ secrets.KAVYA_DB_PORT }}" >> .env
        
        # Google Drive folder IDs
        echo "DRIVE_BOPO_FOLDER_ID=${{ secrets.DRIVE_BOPO_FOLDER_ID }}" >> .env
        echo "DRIVE_EXT_PROD_FOLDER_ID=${{ secrets.DRIVE_EXT_PROD_FOLDER_ID }}" >> .env
        echo "DRIVE_EXT_TEST_FOLDER_ID=${{ secrets.DRIVE_EXT_TEST_FOLDER_ID }}" >> .env
        echo "DRIVE_KAVYA_FOLDER_ID=${{ secrets.DRIVE_KAVYA_FOLDER_ID }}" >> .env
        echo "DRIVE_BOPO_BACKUP_FOLDER_ID_1=${{ secrets.DRIVE_BOPO_BACKUP_FOLDER_ID_1 }}" >> .env
        echo "DRIVE_EXT_PROD_BACKUP_FOLDER_ID_1=${{ secrets.DRIVE_EXT_PROD_BACKUP_FOLDER_ID_1 }}" >> .env
        echo "DRIVE_EXT_TEST_BACKUP_FOLDER_ID_1=${{ secrets.DRIVE_EXT_TEST_BACKUP_FOLDER_ID_1 }}" >> .env
        echo "DRIVE_KAVYA_BACKUP_FOLDER_ID_1=${{ secrets.DRIVE_KAVYA_BACKUP_FOLDER_ID_1 }}" >> .env
        echo "DRIVE_BOPO_BACKUP_FOLDER_ID_2=${{ secrets.DRIVE_BOPO_BACKUP_FOLDER_ID_2 }}" >> .env
        echo "DRIVE_EXT_PROD_BACKUP_FOLDER_ID_2=${{ secrets.DRIVE_EXT_PROD_BACKUP_FOLDER_ID_2 }}" >> .env
        echo "DRIVE_EXT_TEST_BACKUP_FOLDER_ID_2=${{ secrets.DRIVE_EXT_TEST_BACKUP_FOLDER_ID_2 }}" >> .env
        echo "DRIVE_KAVYA_BACKUP_FOLDER_ID_2=${{ secrets.DRIVE_KAVYA_BACKUP_FOLDER_ID_2 }}" >> .env

        # Create SSH keys
        echo "${{ secrets.EXG_LINUX_KEY_PAIR }}" > EXG_Linux_key_pair.pem
        echo "${{ secrets.KAVYA_DJANGO_KEY }}" > Kavya_django_key.pem
        
        # Set proper permissions for SSH keys
        chmod 600 EXG_Linux_key_pair.pem
        chmod 600 Kavya_django_key.pem

    - name: Create Google Drive token file
      run: |
        echo '${{ secrets.GOOGLE_DRIVE_TOKEN }}' > token.json

    - name: Setup Git configuration for GitHub pushes
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"

    - name: Clone db_backups repository if needed
      run: |
        if [ ! -d "db_backups" ]; then
            echo "Cloning db_backups repository..."
            git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/gayatriraj123/db_backups.git db_backups
        else
            echo "db_backups repository already exists, pulling latest changes..."
            cd db_backups
            git pull https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/gayatriraj123/db_backups.git main
            cd ..
        fi

    - name: Run database backup script
      run: |
        echo "=== Running backup script ==="
        python scheduled_dumps.py

    - name: Force push to GitHub if script failed
      run: |
        echo "=== Ensuring GitHub backup is completed ==="
        if [ -d "db_backups" ]; then
            cd db_backups
            # Check if there are any changes
            if git status --porcelain | grep -q .; then
                echo "Changes detected, committing and pushing..."
                git add .
                git config user.email "github-actions@github.com"
                git config user.name "GitHub Actions"
                git commit -m "Auto backup at $(date '+%Y-%m-%d %H:%M:%S')"
                git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/gayatriraj123/db_backups.git main
                echo "✅ Successfully pushed to GitHub"
            else
                echo "No changes to commit"
            fi
            cd ..
        else
            echo "❌ db_backups directory not found"
        fi
        
    - name: Verify results
      run: |
        echo "=== Verification ==="
        echo "Local dump files:"
        find . -name "*.sql" -type f | head -5
        echo "GitHub repo files:"
        if [ -d "db_backups" ]; then
            find db_backups -name "*.sql" -type f | head -5
        fi
        echo "Google Drive test:"
        ls -la | grep -E "(BOPO|EXT|KAVYA)" || echo "No local dump folders found"

    - name: Clean up sensitive files
      run: |
        rm -f .env
        rm -f EXG_Linux_key_pair.pem
        rm -f Kavya_django_key.pem
        rm -f token.json
